import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply from: "${rootDir}/gradle/jmh.gradle"
apply from: "${projectDir}/testing.gradle"

sourceSets {
  javaPoet {
    java.srcDir 'src/javaPoet/java'
  }
  main {
    java.srcDir "${buildDir}/generated-sources/"
  }
  codeGen {
    java.srcDir "${buildDir}/generated-sources/"
  }
}

configurations {
  javaAgent
}

idea.module {
  scopes.PROVIDED.plus += [ configurations.javaPoetCompileClasspath ]
}

eclipse.classpath.file.whenMerged {
  entries.findAll { it instanceof SourceFolder && it.output == 'bin/codeGen' }*.output = 'bin/main'
}

plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.javaPoetCompileClasspath ]
}

dependencies {
  api libraries.checkerAnnotations
  api libraries.errorproneAnnotations

  testImplementation libraries.joor
  testImplementation libraries.ycsb
  testImplementation libraries.guava
  testImplementation libraries.picocli
  testImplementation libraries.fastutil
  testImplementation testLibraries.junit
  testImplementation testLibraries.testng
  testImplementation testLibraries.jctools
  testImplementation testLibraries.lincheck
  testImplementation libraries.commonsLang3
  testImplementation testLibraries.slf4jTest
  testImplementation testLibraries.guavaTestLib
  testImplementation testLibraries.commonsCollectionsTests
  testImplementation testLibraries.eclipseCollectionsTestLib

  javaAgent libraries.jamm

  jmh libraries.jamm
  jmh libraries.guava
  jmh libraries.tcache
  jmh libraries.cache2k
  jmh libraries.ehcache3
  jmh libraries.fastutil
  jmh libraries.slf4jNop
  jmh libraries.flipTables
  jmh libraries.jackrabbit
  jmh libraries.expiringMap
  jmh libraries.concurrentlinkedhashmap

  javaPoetImplementation libraries.guava
  javaPoetImplementation libraries.javapoet
  javaPoetImplementation libraries.commonsLang3
  javaPoetImplementation libraries.googleJavaFormat

  api "org.jspecify:jspecify:0.2.0"
}

tasks.named('compileCodeGenJava').configure {
  onlyIf { System.env.'CI' }
  dependsOn compileJava

  doFirst {
    options.compilerArgs += [ '--module-path', classpath.asPath ]
  }
  options.debug = false
  options.incremental = false
  destinationDirectory = compileJava.destinationDirectory
  classpath = sourceSets.main.runtimeClasspath + sourceSets.main.output
}

tasks.named('jar').configure {
  dependsOn compileCodeGenJava
  manifest {
    attributes 'Bundle-SymbolicName': 'com.github.ben-manes.caffeine'
    attributes 'Import-Package': ''
    attributes 'Export-Package': [
      'com.github.benmanes.caffeine',
      'com.github.benmanes.caffeine.cache',
      'com.github.benmanes.caffeine.cache.stats'].join(',')
    attributes 'Automatic-Module-Name': 'com.github.benmanes.caffeine'
  }
}

def generateLocalCaches = tasks.register('generateLocalCaches', JavaExec) {
  mainClass = 'com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator'
  classpath = sourceSets.javaPoet.runtimeClasspath
  outputs.dir "${buildDir}/generated-sources/"
  args "${buildDir}/generated-sources/"
  dependsOn compileJavaPoetJava
}

def generateNodes = tasks.register('generateNodes', JavaExec) {
  mainClass = 'com.github.benmanes.caffeine.cache.NodeFactoryGenerator'
  classpath = sourceSets.javaPoet.runtimeClasspath
  outputs.dir "${buildDir}/generated-sources/"
  args "${buildDir}/generated-sources/"
  dependsOn compileJavaPoetJava
}

tasks.named('compileJava').configure {
  dependsOn generateLocalCaches, generateNodes
  finalizedBy compileCodeGenJava
}
tasks.named('compileJavaPoetJava').configure {
  finalizedBy generateLocalCaches, generateNodes
}
tasks.named('compileTestJava').configure {
  dependsOn(jar)
}
['compileTestJava', 'pmdMain', 'spotbugsMain'].collect { tasks.named(it) }*.configure {
  dependsOn compileCodeGenJava
}
tasks.named('sourcesJar').configure {
  dependsOn generateLocalCaches, generateNodes
}

tasks.register('memoryOverhead', JavaExec) {
  group = 'Benchmarks'
  description = 'Evaluates cache overhead'
  classpath sourceSets.jmh.runtimeClasspath
  jvmArgs "-javaagent:${configurations.javaAgent.singleFile}"
  mainClass = 'com.github.benmanes.caffeine.cache.MemoryBenchmark'
}
